#!groovyâ€‹

properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '10']]])

def skipCi = false

stage('build & unit tests & nexus & sonar') {

    node('jenkins-slave') {
        checkout scm
        ciSkipAfterStartRelease = sh(script: "git log -1 | grep 'updating poms'", returnStatus: true)
        ciSkipAfterFinishRelease = sh(script: "git log -1 | grep 'Updating develop poms back to pre merge state'", returnStatus: true)
        skipCi = (ciSkipAfterStartRelease == 0 || ciSkipAfterFinishRelease == 0) && env.BRANCH_NAME == 'develop' ? true : buildGradle()
    }
}

if (skipCi) {
    echo "ci-skip step reached!. Mark job to be finished successfully..."
    currentBuild.result = 'SUCCESS'
    return
}

def branchType = getBranchType "${env.BRANCH_NAME}"
def branchDeploymentEnvironment = getBranchDeploymentEnvironment branchType

if (branchDeploymentEnvironment) {

    stage('build docker image') {

        node('jenkins-slave') {

            gradle "buildDockerImage pushDockerImage"
        }
    }

    stage('deploy artifact to DC/OS') {

        if (branchDeploymentEnvironment == "prod") {

            try {
                timeout(time: 1, unit: 'DAYS') {
                    input "Do you want to deploy to production?"
                }
            } catch (abort) {
                echo "Job finished due to ${abort}..."
                currentBuild.result = 'SUCCESS'
                return
            }

        }

        node('jenkins-slave') {
            deployArtifactGradle branchDeploymentEnvironment
        }
    }

    if (branchDeploymentEnvironment != "prod") {


        stage('perform tests') {

            node('jenkins-slave') {
                executeTestsGradle branchDeploymentEnvironment
            }
        }
    }


    if (branchType == "dev") {

        stage('start release') {

            try  {
                timeout(time: 1, unit: 'HOURS') {
                    input "Do you want to prepare a release process?"
                }

            } catch (abort) {
                echo "Job finished due to ${abort}..."
                currentBuild.result = 'SUCCESS'
                return
            }

            node('jenkins-slave') {
                gradle("releaseStart releasePublish --info")
            }
        }

    } else if (branchType == "release") {

        branchDeploymentEnvironment = "uat"

        stage('deploy release candidate to UAT') {

            try {
                timeout(time: 1, unit: 'HOURS') {
                    input 'Do you want to execute a release process? If so, after deployment and integration tests successfully passed against ${branchDeploymentEnvironment}, release will be created...'
                }
            } catch (abort) {
                echo "Job finished due to ${abort}..."
                currentBuild.result = 'SUCCESS'
                return
            }

            node('jenkins-slave') {
                deployArtifactGradle branchDeploymentEnvironment
            }
        }

        stage('perform acceptation tests') {

            node('jenkins-slave') {
                executeTestsGradle branchDeploymentEnvironment
            }
        }

        stage('end release') {

            node('jenkins-slave') {
                gradle("releaseFinish -DnoDeploy=true")
            }
        }

    } else if (branchType == "hotfix") {

        stage('finish hotfix') {

            try {
                timeout(time: 1, unit: 'HOURS') {
                    input "Is the hotfix finished?"
                }
            } catch (abort) {
                echo "Job finished due to ${abort}..."
                currentBuild.result = 'SUCCESS'
                return
            }

            node('jenkins-slave') {
                gradle("hotfixFinish -DnoDeploy=true")
            }
        }
    }
}


def getBranchType(String branchName) {

    def devPattern = ".*develop"
    def releasePattern = ".*release/.*"
    def featurePattern = ".*feature/.*"
    def hotfixPattern = ".*hotfix/.*"
    def masterPattern = ".*master"

    if (branchName =~ devPattern) {
        return "dev"
    } else if (branchName =~ releasePattern) {
        return "release"
    } else if (branchName =~ masterPattern) {
        return "master"
    } else if (branchName =~ featurePattern) {
        return "feature"
    } else if (branchName =~ hotfixPattern) {
        return "hotfix"
    } else {
        return null
    }
}

def getBranchDeploymentEnvironment(String branchType) {

    if (branchType == "dev") {
        return "dev"
    } else if (branchType == "release") {
        return "syt"
    } else if (branchType == "master") {
        return "prod"
    } else {
        return null
    }
}

def mvn(String goals) {

    def mvnHome = tool "Maven-3.3.9"

    withCredentials([usernamePassword(credentialsId: 'githubuser', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD'),
                     string(credentialsId: 'nexusUrl', variable: 'NEXUS_URL'),
                     usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD'),
                     string(credentialsId: 'sonarUrl', variable: 'SONAR_URL')]) {

        withEnv(["PATH+MAVEN=${mvnHome}/bin"]) {
            sh "mvn -B ${goals} --settings /opt/settings.xml"
        }
    }
}

def gradle(String tasks) {

    def gradleHome = tool "Gradle-4.9"

    withCredentials([usernamePassword(credentialsId: 'githubuser', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD'),
                     string(credentialsId: 'nexusUrl', variable: 'NEXUS_URL'),
                     usernamePassword(credentialsId: 'nexus', usernameVariable: 'bawagNexusUser', passwordVariable: 'bawagNexusPassword'),
                     string(credentialsId: 'sonarUrl', variable: 'SONAR_URL')]) {

        withEnv(["PATH+GRADLE=${gradleHome}/bin"]) {
            sh "gradle ${tasks} -PbawagNexusUser=${bawagNexusUser} -PbawagNexusPassword=${bawagNexusPassword} -PgitUsername=${GIT_USER} -PgitPassword=${GIT_PASSWORD} -Dsonar.host.url=${SONAR_URL}"
        }
    }
}

def version() {
    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
    return matcher ? matcher[0][1] : null
}

def versionGradle() {
    def props = readProperties  file: 'gradle.properties'
    return props['project.version']
}

def artifactId() {
    def matcher = readFile('pom.xml') =~ '<artifactId>(.+)</artifactId>'
    return matcher ? matcher[0][1] : null
}

def artifactIdGradle() {
    def props = readProperties  file: 'gradle.properties'
    return props['project.artifactId']
}

def build() {
    def v = version()
    currentBuild.displayName = "${env.BRANCH_NAME}-${v}-${env.BUILD_NUMBER}"
    mvn "clean deploy -DskipITs=true -DskipPTs=true sonar:sonar"
    return false
}

def buildGradle() {
    def v = versionGradle()
    currentBuild.displayName = "${env.BRANCH_NAME}-${v}-${env.BUILD_NUMBER}"
    gradle "clean unitTest assemble sonarqube uploadArchives"
    return false
}


def executeTests(String branchDeploymentEnvironment) {

    def artifactId = artifactId()

    switch (branchDeploymentEnvironment) {

        case "dev":
            //TODO: Check which tests should be performed here!
            //Executing integration tests...
            mvn "clean verify -DskipUTs=true -Dremote.service.it.url=http://${artifactId}.marathon.mesos:8080"
            break
        case "syt":
            //Executing performance tests...
            mvn "clean verify -DskipUTs=true -DskipITs=true -DskipPTs=false -Dremote.service.pt.host=${artifactId}.marathon.mesos -Dremote.service.pt.port=8080"
            break
        case "uat":
            //Executing integration tests...
            mvn "clean verify -DskipUTs=true -Dremote.service.it.url=http://${artifactId}.marathon.mesos:8080"
            break
        default:
            break
    }
}

def executeTestsGradle(String branchDeploymentEnvironment) {

    def artifactId = artifactIdGradle()

    switch (branchDeploymentEnvironment) {

        case "dev":
            //TODO: Check which tests should be performed here!
            //Executing integration tests...
            gradle "clean integrationTest -Dremote.service.it.url=http://${artifactId}.marathon.mesos:8080"
            break
        case "syt":
            //Executing performance tests...
            gradle "jmClean jmRun -Dremote.service.pt.host=${artifactId}.marathon.mesos -Dremote.service.pt.port=8080"
            break
        case "uat":
            //Executing integration tests...
            gradle "clean integrationTest -Dremote.service.it.url=http://${artifactId}.marathon.mesos:8080"
            break
        default:
            break
    }
}

def deployArtifact(String branchDeploymentEnvironment) {

    withCredentials([usernamePassword(credentialsId: 'jenkinsDcos_' + branchDeploymentEnvironment, usernameVariable: 'USER_ID', passwordVariable: 'USER_PASSWORD'),
                     string(credentialsId: 'dcosLoginUrl_' + branchDeploymentEnvironment, variable: 'DCOS_LOGIN_URL'),
                     string(credentialsId: 'marathonApiUrl_' + branchDeploymentEnvironment, variable: 'MARATHON_API_URL')]) {


        def artifactId = artifactId()

        withEnv(["ARTIFACT_ID=${artifactId}"]) {
            sh "echo Deploying to ${branchDeploymentEnvironment}"
            sh "/opt/dcos_deploy.sh"
        }
    }
}

def deployArtifactGradle(String branchDeploymentEnvironment) {

    withCredentials([usernamePassword(credentialsId: 'jenkinsDcos_' + branchDeploymentEnvironment, usernameVariable: 'USER_ID', passwordVariable: 'USER_PASSWORD'),
                     string(credentialsId: 'dcosLoginUrl_' + branchDeploymentEnvironment, variable: 'DCOS_LOGIN_URL'),
                     string(credentialsId: 'marathonApiUrl_' + branchDeploymentEnvironment, variable: 'MARATHON_API_URL')]) {


        def artifactId = artifactIdGradle()

        withEnv(["ARTIFACT_ID=${artifactId}"]) {
            sh "echo Deploying to ${branchDeploymentEnvironment}"
            sh "/opt/dcos_deploy.sh"
        }
    }
}
